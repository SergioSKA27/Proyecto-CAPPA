import streamlit as st
import hydralit_components as hc
import base64
from streamlit_elements import elements, mui, html
import streamlit_wordcloud as wordcloud
import streamlit.components.v1 as components
from streamlit_calendar import calendar
#Autor: Sergio Lopez

#--------------------------------------------- page config -------------------------------------------------
#basic page configuration
st.set_page_config(
    page_title='CAPA',
    page_icon=":snake:",
    layout="wide",
    initial_sidebar_state="collapsed",
    menu_items={
        'Get Help': 'https://www.extremelycoolapp.com/help',
        'Report a bug': "https://www.extremelycoolapp.com/bug",
        'About': """# Web Site Club de Algoritmia Avanzada en Python.
                        Todos los derechos reservados 2023, CAPA."""
    }
)

#Disable sidebar
st.markdown(
    """
<style>
    [data-testid="collapsedControl"] {
        display: none
    }
</style>
""",
    unsafe_allow_html=True,
)

#--------------------------------------------- Session States -------------------------------------------------------


#If the user is not logged in we create the session state for login state with None
if 'loginst' not in  st.session_state:
    st.session_state.loginst = None

if st.session_state.loginst is not None:
    print('Hello')


#--------------------------------------------- Header -------------------------------------------------------



def pythonlogo(width=25,height=25):
    """
    The `pythonlogo` function displays the Python logo using SVG code and a CSS file.
    """
    with open('src/Frontend/stylepythonlogo.css') as f:
        container1 = st.empty()
        columns1,col2,col3 = st.columns(3)
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
        with columns1:
            container1.markdown(
    f'''<svg width="{width}%" height="{height}%" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg" id="python-logo">
    <path d="m116 296c0-30.328125 24.671875-55 55-55h170c13.785156 0 25-11.214844 25-25v-141c0-41.355469-33.644531-75-75-75h-70c-41.355469 0-75 33.644531-75 75v41h110c8.285156 0 15 6.714844 15 15s-6.714844 15-15 15h-181c-41.355469 0-75 33.644531-75 75v70c0 41.355469 33.644531 75 75 75h41zm105-220c-8.285156 0-15-6.714844-15-15s6.714844-15 15-15 15 6.714844 15 15-6.714844 15-15 15zm0 0" />
    <path d="m437 146h-41v70c0 30.328125-24.671875 55-55 55h-170c-13.785156 0-25 11.214844-25 25v141c0 41.355469 33.644531 75 75 75h70c41.355469 0 75-33.644531 75-75v-41h-110c-8.285156 0-15-6.714844-15-15s6.714844-15 15-15h181c41.355469 0 75-33.644531 75-75v-70c0-41.355469-33.644531-75-75-75zm-146 290c8.285156 0 15 6.714844 15 15s-6.714844 15-15 15-15-6.714844-15-15 6.714844-15 15-15zm0 0" />
    </svg>''',unsafe_allow_html=True
            )



def show_logos():
    """
    The `show_logos` function displays the Python logo and the name of a Python club using SVG code and a CSS file.
    """


    columns1,col2,col3 = st.columns((0.4,0.4,0.2))

    with col2:
        st.image("resources/logos/LogoCAPPA.png")
    with columns1:
        st.image("resources/logos/logoFESA.png",width=300)
    with col3:
        pythonlogo(30,30)


show_logos()


#--------------------------------------------- Navbar -------------------------------------------------------


if st.session_state.loginst == None:
#navbar items for not logged in users

    user = 'Login'
    menu_data = [
    {'icon': "far fa-copy", 'label':"Docs"},
    {'id':'About','icon':"‚ùì",'label':"FAQ"},
    {'id':'contact','icon':"üì©",'label':"Contacto"},
    ]
else:
    menu_data = [
    {'icon': "fa-solid fa-radar",'label':"Problemas", 'submenu':[{'id':' subid11','icon': "fa fa-paperclip", 'label':"Basicos"},{'id':'subid12','icon': "fa fa-database", 'label':"Intermedios"},{'id':'subid13','icon': "üíÄ", 'label':"Avanzados"},{'id':'subid14','icon': "üîß", 'label':"Editor"}]},
    {'id':'contest','icon': "üèÜ", 'label':"Concursos"},
    {'icon': "fas fa-tachometer-alt", 'label':"Dashboard",'ttip':"I'm the Dashboard tooltip!"}, #can add a tooltip message
    {'id':'docs','icon': "far fa-copy", 'label':"Docs"},
    {'id':'code','icon': "üë®‚Äçüíª", 'label':"Editor de CoÃÅdigo"},
    {'icon': "fa-solid fa-radar",'label':"Tests", 'submenu':[{'label':"Basicos 1", 'icon': "üêõ"},{'icon':'üêç','label':"Intermedios"},{'icon':'üêâ','label':"Avanzados",},{'id':'subid144','icon': "üîß", 'label':"Editor" }]},
    {'id':'About','icon':"‚ùì",'label':"FAQ"},
    {'id':'contact','icon':"üì©",'label':"Contacto"},
    {'id':'logout','icon': "üö™", 'label':"Logout"},#no tooltip message

    ]

over_theme = {'txc_inactive': '#FFFFFF','menu_background':'#002B7A'}
menu_id = hc.nav_bar(
        menu_definition=menu_data,
        override_theme=over_theme,
        home_name='Inicio',
        login_name=user,
        hide_streamlit_markers=True, #will show the st hamburger as well as the navbar now!
        sticky_nav=False, #at the top or not
        sticky_mode='jumpy', #jumpy or not-jumpy, but sticky or pinned
    )





#--------------------------------------------- body -------------------------------------------------------
with open('src/Frontend/welcome.html')  as wlcome:
    components.html(wlcome.read(),height=200)




programming_concepts = [
    {
        "text": "Variable",
        "definition": "Una variable es un contenedor para almacenar datos en un programa. Puede contener diferentes tipos de datos, como n√∫meros, cadenas de texto o booleanos.",
        "example": "x = 10",
        "use_case": "Las variables se utilizan para almacenar y manipular datos en un programa.",
        "value": 16000, "color":"#0E2954"
    },
    {
        "text": "Ciclo For",
        "definition": "Un ciclo for es una estructura de control que se utiliza para iterar sobre una secuencia de elementos, como una lista o una cadena de texto.",
        "example": "for elemento in lista:",
        "use_case": "Se usa para recorrer elementos en una secuencia y realizar una acci√≥n en cada iteraci√≥n.",
        "value": 8500, "color":"#1F6E8C"
    },
    {
        "text": "Funci√≥n",
        "definition": "Una funci√≥n es un bloque de c√≥digo reutilizable que realiza una tarea espec√≠fica. Puede recibir argumentos y devolver un resultado.",
        "example": "def suma(a, b):\n    return a + b",
        "use_case": "Las funciones se utilizan para organizar y reutilizar el c√≥digo, as√≠ como para modularizar programas.",
        "value": 13400, "color":"#2E8A99"
    },{
        "text": "Algoritmo",
        "definition": "Un algoritmo es un conjunto de instrucciones paso a paso dise√±adas para resolver un problema o realizar una tarea espec√≠fica en un programa.",
        "example": "El algoritmo de ordenaci√≥n de burbuja es un ejemplo com√∫n de un algoritmo de clasificaci√≥n.",
        "use_case": "Se utilizan para resolver problemas y realizar tareas en programaci√≥n.",
        "value": 8300, "color":"#84A7A1"
    },
    {
        "text": "Condici√≥n",
        "definition": "Una condici√≥n es una expresi√≥n booleana que determina si se ejecuta un bloque de c√≥digo en funci√≥n de si es verdadera o falsa.",
        "example": "if edad >= 18:",
        "use_case": "Las condiciones se utilizan para tomar decisiones en un programa y controlar su flujo.",
        "value": 12400, "color":"#461959"
    },
    {
        "text": "Bucle While",
        "definition": "Un bucle while es una estructura de control que se utiliza para repetir un bloque de c√≥digo mientras una condici√≥n sea verdadera.",
        "example": "while contador < 10:",
        "use_case": "Se utiliza para ejecutar c√≥digo repetidamente hasta que la condici√≥n especificada sea falsa.",
        "value": 10300, "color":"#7A316F"
    },
    {
        "text": "Listas",
        "definition": "Una lista es una estructura de datos que almacena una colecci√≥n ordenada de elementos. Los elementos pueden ser de diferentes tipos.",
        "example": "mi_lista = [1, 2, 3, 'cuatro']",
        "use_case": "Se utilizan para almacenar y manipular conjuntos de datos relacionados.",
        "value": 31, "color":"#CD6688"
    },
    {
        "text": "Diccionarios",
        "definition": "Un diccionario es una estructura de datos que almacena pares clave-valor. Cada clave est√° asociada a un valor √∫nico.",
        "example": "mi_diccionario = {'nombre': 'Juan', 'edad': 30}",
        "use_case": "Se utilizan para representar datos en forma de mapeo clave-valor.",
        "value": 6000, "color":"#AED8CC"
    },
    {
        "text": "Clase",
        "definition": "Una clase es un plano o plantilla para crear objetos en programaci√≥n orientada a objetos (POO). Define atributos y m√©todos para los objetos.",
        "example": "class Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad",
        "use_case": "Se utilizan para modelar objetos y encapsular comportamientos en la POO.",
        "color":"#454545",'value': 4500
    },
    {
        "text": "Recursi√≥n",
        "definition": "La recursi√≥n es una t√©cnica en la que una funci√≥n se llama a s√≠ misma para resolver un problema m√°s grande o repetitivo.",
        "example": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "use_case": "Se utiliza para abordar problemas que pueden descomponerse en subproblemas similares m√°s peque√±os.",
        "value": 5600, "color":"#FF6000"
    },
    {
        "text": "Interfaz de Usuario (UI)",
        "definition": "La interfaz de usuario es la parte de un programa que interact√∫a con los usuarios. Incluye elementos gr√°ficos como botones y formularios.",
        "example": "Una aplicaci√≥n de procesamiento de texto tiene una UI que permite a los usuarios escribir y formatear texto.",
        "use_case": "Se utiliza para crear aplicaciones amigables y accesibles para los usuarios.",
        "value": 1402, "color":"#FFA559"
    },
    {
        "text": "Depuraci√≥n",
        "definition": "La depuraci√≥n es el proceso de identificar y corregir errores en un programa. Se utiliza para asegurarse de que el programa funcione correctamente.",
        "example": "Los programadores utilizan herramientas de depuraci√≥n para rastrear y solucionar problemas en el c√≥digo.",
        "use_case": "Es esencial para garantizar la calidad y la fiabilidad del software.",
        "value": 5603, "color":"#A9907E"
    },
    {
        "text": "API",
        "definition": "Una API es un conjunto de reglas y protocolos que permiten a diferentes aplicaciones comunicarse y compartir datos y funcionalidades.",
        "example": "Las redes sociales suelen proporcionar API que permiten a los desarrolladores acceder a datos y funciones de la plataforma.",
        "use_case": "Se utilizan para integrar servicios y datos de diferentes fuentes en una aplicaci√≥n.",
        "value": 1523, "color":"#F3DEBA"
    },
    {
        "text": "Excepciones",
        "definition": "Las excepciones son eventos inesperados o errores que pueden ocurrir durante la ejecuci√≥n de un programa en Python. Se manejan mediante bloques 'try' y 'except' para gestionar errores de manera controlada.",
        "example": "try:\n    resultado = 10 / 0\nexcept ZeroDivisionError as e:\n    print('Error:', e)",
        "use_case": "El manejo de excepciones permite que un programa contin√∫e ejecut√°ndose incluso despu√©s de encontrar errores.",
        "value": 2456,
        "color": "#ABC4AA"
    },
    {
        "text": "M√≥dulos",
        "definition": "Los m√≥dulos son archivos de Python que contienen definiciones de funciones, clases y variables. Se utilizan para organizar y reutilizar el c√≥digo en diferentes programas.",
        "example": "import math\n\ncoseno = math.cos(0)",
        "use_case": "Los m√≥dulos en Python permiten dividir el c√≥digo en partes m√°s peque√±as y mantenibles, y se pueden importar en otros programas.",
        "value": 3128,
        "color": "#B4B4B3"
    },
    {
        "text": "Decoradores",
        "definition": "Un decorador es una funci√≥n que se utiliza para modificar o extender el comportamiento de otra funci√≥n o m√©todo en Python. Se colocan sobre la definici√≥n de una funci√≥n con el s√≠mbolo '@'.",
        "example": "@decorador\n def funcion_a_decorar():\n     pass",
        "use_case": "Los decoradores se utilizan para agregar funcionalidades adicionales a funciones o m√©todos sin modificar su c√≥digo interno.",
        "value": 1897,
        "color": "#26577C"
    },
    {
        "text": "Comprensiones de Listas",
        "definition": "Las comprensiones de listas son una forma concisa de crear listas en Python mediante una expresi√≥n y un bucle 'for'. Son √∫tiles para filtrar y transformar datos de manera eficiente.",
        "example": "cuadrados = [x**2 for x in range(10)]",
        "use_case": "Las comprensiones de listas simplifican la creaci√≥n de listas a partir de secuencias de datos existentes.",
        "value": 987,
        "color": "#E55604"
    },
    {
        "text": "Herencia",
        "definition": "La herencia es un concepto de la programaci√≥n orientada a objetos en Python que permite crear nuevas clases basadas en clases existentes. La clase derivada hereda atributos y m√©todos de la clase base.",
        "example": "class Animal:\n    def hablar(self):\n        pass\n\nclass Perro(Animal):\n    def hablar(self):\n        return 'Woof'",
        "use_case": "La herencia se utiliza para reutilizar y extender comportamientos de clases existentes.",
        "value": 1523,
        "color": "#27005D"
    },
    {
        "text": "Expresiones Regulares",
        "definition": "Las expresiones regulares, o regex, son patrones de b√∫squeda utilizados para encontrar y manipular texto en Python. El m√≥dulo 're' proporciona funciones para trabajar con expresiones regulares.",
        "example": "import re\n\npatron = r'\d+'  # Encuentra uno o m√°s d√≠gitos\nresultado = re.findall(patron, '123 abc 456')",
        "use_case": "Las expresiones regulares se utilizan para realizar b√∫squedas avanzadas y manipular texto en cadenas de caracteres.",
        "value": 2456,
        "color": "#9400FF"
    },
    {
        "text": "Manejo de Archivos",
        "definition": "Python proporciona funciones y m√©todos para trabajar con archivos en el sistema de archivos. Se pueden abrir, leer, escribir y cerrar archivos de manera eficiente.",
        "example": "with open('archivo.txt', 'r') as archivo:\n    contenido = archivo.read()",
        "use_case": "El manejo de archivos es esencial para leer y escribir datos en programas Python.",
        "value": 3128,
        "color": "#AED2FF"
    },
    {
        "text": "Virtualenv",
        "definition": "Virtualenv es una herramienta que permite crear entornos virtuales aislados en Python. Cada entorno virtual puede tener sus propias bibliotecas y versiones de Python, lo que facilita la gesti√≥n de dependencias y proyectos.",
        "example": "virtualenv mi_entorno\nsource mi_entorno/bin/activate",
        "use_case": "Virtualenv se utiliza para evitar conflictos de dependencias y mantener proyectos Python independientes.",
        "value": 1897,
        "color": "#191D88"
    },
    {
        "text": "Pip",
        "definition": "Pip es el administrador de paquetes de Python, utilizado para instalar, actualizar y administrar bibliotecas y paquetes de Python desde el repositorio de PyPI (Python Package Index).",
        "example": "pip install nombre_del_paquete",
        "use_case": "Pip es esencial para gestionar las dependencias de un proyecto Python.",
        "value": 987,
        "color": "#1450A3"
    },
    {
        "text": "Iteradores",
        "definition": "Los iteradores en Python son objetos que permiten recorrer una secuencia de elementos uno por uno. Se implementan mediante los m√©todos `__iter__()` y `__next__()` en una clase.",
        "example": "Puedes crear tus propios iteradores o utilizar los iteradores incorporados en Python, como `range()` y `enumerate()`.",
        "use_case": "Se utilizan para recorrer colecciones de datos, como listas, diccionarios y conjuntos, de manera eficiente y controlada.",
        "value": 1011,
        "color": "#3498db"
    },
    {
        "text": "Comprensi√≥n de Conjuntos y Diccionarios",
        "definition": "Adem√°s de la comprensi√≥n de listas, Python tambi√©n admite la comprensi√≥n de conjuntos y diccionarios. Estas expresiones permiten crear conjuntos y diccionarios de manera concisa.",
        "example": "Ejemplo de comprensi√≥n de conjunto: `{x**2 for x in range(10)}` crea un conjunto de los cuadrados de los n√∫meros del 0 al 9.",
        "use_case": "Se utilizan para crear conjuntos y diccionarios de manera eficiente y expresiva a partir de iterables o secuencias.",
        "value": 1112,
        "color": "#e74c3c"
    },
    {
        "text": "M√≥dulo 'requests'",
        "definition": "El m√≥dulo 'requests' es una biblioteca de Python ampliamente utilizada para realizar solicitudes HTTP a servidores web. Facilita la realizaci√≥n de peticiones GET, POST y otras operaciones relacionadas con HTTP.",
        "example": "Puedes usar el m√≥dulo 'requests' para interactuar con APIs web y acceder a recursos en l√≠nea desde tu programa Python.",
        "use_case": "Se utiliza para realizar solicitudes y recibir respuestas HTTP, lo que es esencial para la integraci√≥n de servicios web en aplicaciones.",
        "value": 1213,
        "color": "#9b59b6"
    },
    {
        "text": "Generadores",
        "definition": "Los generadores en Python son funciones que generan valores de manera perezosa (on-demand) en lugar de generar una lista completa de valores. Esto ahorra memoria y es eficiente en t√©rminos de rendimiento.",
        "example": "Puedes crear generadores utilizando la sintaxis de funci√≥n y la declaraci√≥n `yield` en lugar de `return`.",
        "use_case": "Se utilizan cuando necesitas generar secuencias de valores de manera eficiente sin cargar toda la secuencia en memoria.",
        "value": 1415,
        "color": "#27ae60"
    },
    {
        "text": "NumPy",
        "definition": "NumPy es una biblioteca de Python ampliamente utilizada para realizar operaciones matem√°ticas y num√©ricas en matrices y arreglos multidimensionales. Proporciona estructuras de datos eficientes y funciones de alto rendimiento.",
        "example": "Puedes usar NumPy para realizar c√°lculos matriciales, estad√≠sticas, procesamiento de se√±ales y mucho m√°s.",
        "use_case": "Se utiliza en aplicaciones cient√≠ficas, de ingenier√≠a y de an√°lisis de datos donde se requiere manipulaci√≥n eficiente de datos num√©ricos.",
        "value": 1516,
        "color": "#e67e22"
    },
    {
        "text": "Django",
        "definition": "Django es un framework de desarrollo web de alto nivel y de c√≥digo abierto en Python. Proporciona una estructura s√≥lida para construir aplicaciones web, con una amplia gama de caracter√≠sticas incorporadas.",
        "example": "Django se utiliza en la creaci√≥n de aplicaciones web de todos los tama√±os, desde peque√±as aplicaciones hasta sitios web de gran envergadura.",
        "use_case": "Se utiliza para el desarrollo r√°pido y eficiente de aplicaciones web, ya que incluye manejo de bases de datos, autenticaci√≥n de usuarios, enrutamiento y m√°s.",
        "value": 1617,
        "color": "#3498db"
    },
    {
        "text": "PyCharm",
        "definition": "PyCharm es un popular IDE desarrollado por JetBrains para programar en Python. Ofrece un conjunto de herramientas poderosas para el desarrollo, depuraci√≥n y an√°lisis de c√≥digo Python.",
        "example": "PyCharm proporciona caracter√≠sticas como resaltado de sintaxis, depuraci√≥n interactiva, autocompletado y gesti√≥n de proyectos.",
        "use_case": "Se utiliza como un entorno de desarrollo eficiente para proyectos de Python, desde peque√±os scripts hasta aplicaciones complejas.",
        "value": 1718,
        "color": "#9b59b6"
    },
    {
        "text": "Flask",
        "definition": "Flask es un microframework de Python para el desarrollo web. Es minimalista y ofrece las herramientas esenciales para crear aplicaciones web, permitiendo una gran flexibilidad en la elecci√≥n de componentes adicionales.",
        "example": "Flask se utiliza para crear aplicaciones web ligeras y r√°pidas, como sitios web peque√±os, servicios web API y aplicaciones web de una sola p√°gina (SPA).",
        "use_case": "Se utiliza cuando se necesita desarrollar aplicaciones web de manera r√°pida y sencilla sin una sobrecarga de caracter√≠sticas.",
        "value": 1920,
        "color": "#27ae60"
    },
    {
        "text": "Tkinter",
        "definition": "Tkinter es un m√≥dulo est√°ndar de Python que permite crear interfaces gr√°ficas de usuario (GUI). Proporciona herramientas para crear ventanas, botones, cuadros de texto y otros elementos de GUI.",
        "example": "Tkinter se utiliza para desarrollar aplicaciones de escritorio con una interfaz de usuario interactiva.",
        "use_case": "Se utiliza cuando necesitas crear aplicaciones de escritorio con una interfaz de usuario amigable y componentes interactivos.",
        "value": 2122,
        "color": "#3498db"
    },

    {
        "text": "Matplotlib",
        "definition": "Matplotlib es una biblioteca de Python ampliamente utilizada para crear gr√°ficos y visualizaciones de datos de alta calidad. Ofrece una gran flexibilidad en la creaci√≥n de gr√°ficos personalizados.",
        "example": "Puedes utilizar Matplotlib para crear gr√°ficos de barras, gr√°ficos de dispersi√≥n, gr√°ficos de l√≠neas y mucho m√°s, y personalizar su apariencia seg√∫n tus necesidades.",
        "use_case": "Se utiliza en la ciencia de datos, an√°lisis de datos, informes y presentaciones para visualizar datos de manera efectiva.",
        "value": 2223,
        "color": "#9b59b6"
    },
    {
        "text": "conda",
        "definition": "Conda es una herramienta de gesti√≥n de entornos y paquetes que facilita la creaci√≥n, activaci√≥n y gesti√≥n de entornos virtuales para proyectos de Python. Adem√°s, permite la instalaci√≥n y administraci√≥n de paquetes de manera eficiente.",
        "example": "Conda se utiliza para crear entornos virtuales independientes para proyectos de Python y gestionar las dependencias de manera efectiva.",
        "use_case": "Se utiliza para mantener proyectos Python aislados con sus propias dependencias y versiones de paquetes.",
        "value": 2324,
        "color": "#e74c3c"
    },
    {
        "text": "asyncio",
        "definition": "Asyncio es un m√≥dulo incorporado en Python que permite la programaci√≥n asincr√≥nica. Facilita la escritura de c√≥digo que puede realizar m√∫ltiples tareas de manera eficiente sin bloquear el hilo principal.",
        "example": "Puedes utilizar 'asyncio' para escribir servidores web, aplicaciones de red y tareas de E/S de manera asincr√≥nica.",
        "use_case": "Se utiliza cuando se necesita gestionar muchas tareas simult√°neas de manera eficiente, como en aplicaciones web y servicios de red.",
        "value": 2526,
        "color": "#d35400"
    }
    # Contin√∫a agregando m√°s textos en el mismo formato.
]


ml_data_science_concepts = [
    {
        "text": "Machine Learning",
        "definition": "El Aprendizaje Autom√°tico es un subcampo de la inteligencia artificial que se enfoca en desarrollar algoritmos y modelos que permiten a las m√°quinas aprender de datos y realizar tareas sin ser programadas expl√≠citamente.",
        "example": "Entrenar un modelo de Machine Learning para predecir el precio de las viviendas basado en datos hist√≥ricos.",
        "use_case": "El Machine Learning se utiliza en una variedad de aplicaciones, incluyendo clasificaci√≥n de texto, recomendaciones personalizadas y reconocimiento de patrones.",
        "value": 1523,
        "color": "#191D88"
    },
    {
        "text": "Regresi√≥n",
        "definition": "La regresi√≥n es una t√©cnica de Machine Learning que se utiliza para predecir valores num√©ricos basados en datos hist√≥ricos. Puede ser lineal o no lineal, dependiendo de la relaci√≥n entre las variables de entrada y la variable objetivo.",
        "example": "La regresi√≥n lineal se utiliza para predecir el precio de una casa en funci√≥n de caracter√≠sticas como el n√∫mero de habitaciones y el √°rea.",
        "use_case": "La regresi√≥n se utiliza en problemas de predicci√≥n num√©rica, como predicci√≥n de precios, demanda de productos, etc.",
        "value": 2456,
        "color": "#1450A3"
    },
    {
        "text": "Clasificaci√≥n",
        "definition": "La clasificaci√≥n es una t√©cnica de Machine Learning que se utiliza para predecir una etiqueta o categor√≠a a partir de un conjunto de caracter√≠sticas. Se utiliza en problemas donde la variable objetivo es categ√≥rica.",
        "example": "Clasificar correos electr√≥nicos como spam o no spam en funci√≥n de su contenido y caracter√≠sticas.",
        "use_case": "La clasificaci√≥n se aplica en detecci√≥n de fraudes, diagn√≥stico m√©dico, reconocimiento de im√°genes y m√°s.",
        "value": 3128,
        "color": "#337CCF"
    },
    {
        "text": "Redes Neuronales",
        "definition": "Las redes neuronales artificiales son un modelo de Machine Learning inspirado en el funcionamiento del cerebro humano. Consisten en capas de neuronas interconectadas que se utilizan para realizar tareas de aprendizaje profundo.",
        "example": "Una red neuronal convolucional (CNN) se utiliza para el reconocimiento de im√°genes en aplicaciones como reconocimiento de objetos y detecci√≥n de rostros.",
        "use_case": "Las redes neuronales se aplican en tareas de procesamiento de im√°genes, procesamiento de lenguaje natural (NLP) y juegos.",
        "value": 1897,
        "color": "#FFC436"
    },
    {
        "text": "Aprendizaje Supervisado",
        "definition": "El aprendizaje supervisado es un tipo de Machine Learning donde el modelo se entrena utilizando datos etiquetados, es decir, datos con pares de entrada y salida conocidos. El aprendizaje no supervisado implica el entrenamiento sin etiquetas, lo que permite al modelo encontrar patrones por s√≠ mismo.",
        "example": "Clasificaci√≥n de spam es un ejemplo de aprendizaje supervisado, mientras que la segmentaci√≥n de clientes en grupos sin etiquetas es un ejemplo de aprendizaje no supervisado.",
        "use_case": "El aprendizaje supervisado se utiliza en problemas de predicci√≥n y clasificaci√≥n, mientras que el no supervisado se utiliza en la segmentaci√≥n y reducci√≥n de dimensiones.",
        "value": 987,
        "color": "#7A9D54"
    },
    {
        "text": "Validaci√≥n Cruzada",
        "definition": "La validaci√≥n cruzada es una t√©cnica para evaluar el rendimiento de un modelo de Machine Learning utilizando datos de entrenamiento y prueba de manera repetida. Ayuda a estimar c√≥mo se comportar√° el modelo con datos no vistos.",
        "example": "La validaci√≥n cruzada k-fold divide los datos en k partes iguales, entrena y eval√∫a el modelo k veces, utilizando cada parte como conjunto de prueba en una iteraci√≥n diferente.",
        "use_case": "La validaci√≥n cruzada es esencial para evitar el sobreajuste y seleccionar modelos que generalicen bien.",
        "value": 2456,
        "color": "#557A46"
    },
    {
        "text": "NLP",
        "definition": "El Procesamiento de Lenguaje Natural es una rama de la inteligencia artificial que se enfoca en la interacci√≥n entre las computadoras y el lenguaje humano. Se utiliza para analizar, comprender y generar texto en lenguaje natural.",
        "example": "El an√°lisis de sentimientos en redes sociales, donde se identifican opiniones positivas o negativas en comentarios de usuarios.",
        "use_case": "El NLP se aplica en chatbots, traducci√≥n autom√°tica, resumen de texto, y an√°lisis de texto para insights empresariales.",
        "value": 10000,
        "color": "#8C3333"
    },
    {
        "text": "Deep Learning",
        "definition": "El Aprendizaje Profundo es una sub√°rea del Machine Learning que utiliza redes neuronales profundas con m√∫ltiples capas ocultas para resolver problemas complejos. Se ha destacado en tareas de visi√≥n por computadora, procesamiento de lenguaje natural y m√°s.",
        "example": "Las redes neuronales convolucionales (CNN) se utilizan en Aprendizaje Profundo para reconocimiento de im√°genes.",
        "use_case": "El Aprendizaje Profundo se aplica en reconocimiento de voz, detecci√≥n de objetos, conducci√≥n aut√≥noma y m√°s.",
        "value": 1523,
        "color": "#37306B"
    },
    {
        "text": "√Årboles de Decisi√≥n",
        "definition": "Un √Årbol de Decisi√≥n es una t√©cnica de Machine Learning utilizada para la toma de decisiones basada en condiciones l√≥gicas. Divide un conjunto de datos en subconjuntos m√°s peque√±os y, finalmente, toma decisiones basadas en reglas.",
        "example": "Un √Årbol de Decisi√≥n para clasificar si un correo electr√≥nico es spam o no spam basado en caracter√≠sticas como palabras clave y remitente.",
        "use_case": "Los √Årboles de Decisi√≥n se aplican en clasificaci√≥n, regresi√≥n y toma de decisiones automatizadas.",
        "value": 2456,
        "color": "#66347F"
    },
    {
        "text": "TensorFlow",
        "definition": "TensorFlow es una biblioteca de c√≥digo abierto desarrollada por Google para Machine Learning y Aprendizaje Profundo. Se utiliza para construir y entrenar modelos de redes neuronales de manera eficiente.",
        "example": "Entrenamiento de una red neuronal en TensorFlow para tareas de visi√≥n por computadora.",
        "use_case": "TensorFlow se utiliza en una amplia gama de aplicaciones de Aprendizaje Profundo, desde reconocimiento de voz hasta procesamiento de im√°genes.",
        "value": 3128,
        "color": "#9E4784"
    },
    {
        "text": "Pandas",
        "definition": "Pandas es una biblioteca de Python ampliamente utilizada para la manipulaci√≥n y an√°lisis de datos. Proporciona estructuras de datos flexibles y herramientas para limpiar, transformar y analizar datos de manera eficiente.",
        "example": "Carga y manipulaci√≥n de datos en un DataFrame de Pandas para su an√°lisis.",
        "use_case": "Pandas es esencial en Ciencia de Datos para explorar y preparar datos antes de aplicar t√©cnicas de Machine Learning.",
        "value": 1897,
        "color": "#D27685"
    },
    {
        "text": "SciKit-Learn",
        "definition": "SciKit-Learn es una biblioteca de Python que proporciona herramientas para Machine Learning y Ciencia de Datos. Incluye algoritmos de clasificaci√≥n, regresi√≥n, agrupamiento y m√°s, junto con utilidades para la evaluaci√≥n de modelos.",
        "example": "Entrenamiento de un modelo de clasificaci√≥n en SciKit-Learn y evaluaci√≥n de su rendimiento.",
        "use_case": "SciKit-Learn es ampliamente utilizado en proyectos de Machine Learning para implementar algoritmos y evaluar modelos.",
        "value": 987,
        "color": "#9A3B3B"
    },
    {
        "text": "RNN",
        "definition": "Las Redes Neuronales Recurrentes son un tipo de red neuronal que se utiliza en secuencias de datos, como texto o series temporales. Pueden recordar estados anteriores y son √∫tiles para tareas como traducci√≥n autom√°tica y an√°lisis de texto.",
        "example": "Traducci√≥n autom√°tica de un idioma a otro utilizando una RNN.",
        "use_case": "Las RNN se aplican en tareas de procesamiento de lenguaje natural, reconocimiento de voz y predicci√≥n de series temporales.",
        "value": 2456,
        "color": "#C08261"
    },
    {
        "text": "Clustering",
        "definition": "El clustering es una t√©cnica de aprendizaje no supervisado que se utiliza para dividir un conjunto de datos en grupos o clusters basados en similitudes entre los puntos de datos. Los puntos dentro del mismo grupo son m√°s similares entre s√≠ que con los de otros grupos.",
        "example": "Agrupamiento de clientes en segmentos con caracter√≠sticas similares para campa√±as de marketing personalizadas.",
        "use_case": "El clustering se aplica en segmentaci√≥n de clientes, an√°lisis de redes sociales y m√°s.",
        "value": 3128,
        "color": "#0F2C59"
    },
]


advanced_concepts = [
    {
        "text": "B√∫squeda Binaria",
        "definition": "La B√∫squeda Binaria es un algoritmo eficiente para encontrar un elemento en una lista ordenada. Divide repetidamente la lista a la mitad y compara el valor deseado con el valor en el medio hasta encontrar la coincidencia.",
        "example": "La B√∫squeda Binaria se utiliza com√∫nmente en la b√∫squeda de elementos en listas ordenadas, como directorios telef√≥nicos o bases de datos indexadas.",
        "use_case": "Cuando tienes una gran cantidad de datos ordenados y necesitas buscar r√°pidamente un elemento espec√≠fico, la B√∫squeda Binaria es una elecci√≥n eficiente.",
        "value": 1234,
        "color": "#ff5733"
    },
    {
        "text": "Programaci√≥n Din√°mica",
        "definition": "La Programaci√≥n Din√°mica es una t√©cnica para resolver problemas dividi√©ndolos en subproblemas m√°s peque√±os y resolviendo cada subproblema una sola vez, almacenando las soluciones para su reutilizaci√≥n.",
        "example": "La Programaci√≥n Din√°mica se usa en problemas como el c√°lculo del n√∫mero de formas de llegar a un punto en un gr√°fico o encontrar la secuencia de operaciones √≥ptima para una cadena de matrices.",
        "use_case": "Cuando un problema puede descomponerse en subproblemas que se solucionan de manera independiente y se pueden reutilizar, la Programaci√≥n Din√°mica puede mejorar significativamente el rendimiento.",
        "value": 2345,
        "color": "#3498db"
    },
    {
        "text": "Algoritmo Gen√©tico",
        "definition": "Los Algoritmos Gen√©ticos son una t√©cnica de optimizaci√≥n inspirada en la evoluci√≥n biol√≥gica. Utilizan una poblaci√≥n de soluciones candidatas, aplican operadores gen√©ticos y evolucionan a trav√©s de generaciones para encontrar la mejor soluci√≥n posible.",
        "example": "Los Algoritmos Gen√©ticos se aplican en problemas de optimizaci√≥n, como la planificaci√≥n de rutas, el dise√±o de circuitos electr√≥nicos y la optimizaci√≥n de par√°metros en aprendizaje autom√°tico.",
        "use_case": "Cuando necesitas encontrar soluciones √≥ptimas en un espacio de b√∫squeda complejo y amplio, los Algoritmos Gen√©ticos pueden ser una opci√≥n poderosa.",
        "value": 3456,
        "color": "#e74c3c"
    },
    {
        "text": "Kruskal",
        "definition": "El Algoritmo de Kruskal es un algoritmo de grafos que encuentra el √°rbol de expansi√≥n m√≠nima en un grafo ponderado, conectando todos los v√©rtices con el costo total m√°s bajo posible.",
        "example": "Se utiliza en problemas de dise√±o de redes, como la planificaci√≥n de rutas de cableado o la optimizaci√≥n de redes de comunicaci√≥n.",
        "use_case": "Cuando necesitas conectar un conjunto de ubicaciones de manera eficiente, minimizando el costo total de la conexi√≥n, el Algoritmo de Kruskal es una opci√≥n valiosa.",
        "value": 4567,
        "color": "#1abc9c"
    },
    {
        "text": "Floyd-Warshall",
        "definition": "El Algoritmo de Floyd-Warshall es un algoritmo para encontrar los caminos m√°s cortos entre todos los pares de v√©rtices en un grafo ponderado, incluso si hay arcos de peso negativo.",
        "example": "Se utiliza en problemas de planificaci√≥n de rutas, optimizaci√≥n de redes y an√°lisis de grafos para encontrar la distancia m√°s corta entre todos los pares de ubicaciones.",
        "use_case": "Cuando necesitas encontrar las distancias m√°s cortas entre todos los pares de nodos en un grafo, el Algoritmo de Floyd-Warshall es una opci√≥n eficaz.",
        "value": 5678,
        "color": "#9b59b6"
    },
    {
        "text": "Dijkstra",
        "definition": "El Algoritmo de Dijkstra es un algoritmo de b√∫squeda de caminos m√°s cortos en un grafo ponderado dirigido o no dirigido. Encuentra el camino m√°s corto desde un nodo de inicio a todos los dem√°s nodos en el grafo.",
        "example": "Se utiliza en problemas de navegaci√≥n, planificaci√≥n de rutas y redes de transporte para encontrar las rutas m√°s cortas desde un origen a m√∫ltiples destinos.",
        "use_case": "Cuando necesitas encontrar el camino m√°s corto desde un punto de partida a varios destinos en un grafo ponderado, el Algoritmo de Dijkstra es una elecci√≥n com√∫n.",
        "value": 6789,
        "color": "#f39c12"
    },
    {
        "text": "Backtracking",
        "definition": "El Backtracking es una t√©cnica de resoluci√≥n de problemas que se basa en explorar todas las posibles soluciones de manera recursiva, retrocediendo (backtracking) cuando se llega a una soluci√≥n inv√°lida o insatisfactoria.",
        "example": "Se utiliza en problemas de b√∫squeda exhaustiva, como el Sudoku, el problema de las N reinas y la resoluci√≥n de laberintos.",
        "use_case": "Cuando necesitas encontrar todas las soluciones posibles para un problema, incluso si implica explorar un gran espacio de b√∫squeda, el Backtracking es √∫til.",
        "value": 7890,
        "color": "#27ae60"
    },
    {
        "text": "Programaci√≥n Funcional",
        "definition": "La Programaci√≥n Funcional es un estilo de programaci√≥n que se basa en el uso de funciones puras y la inmutabilidad de los datos. Python admite caracter√≠sticas de programaci√≥n funcional, como funciones de orden superior y lambda.",
        "example": "Puedes utilizar funciones como `map()`, `filter()`, y `reduce()` para realizar operaciones en listas de manera funcional.",
        "use_case": "Se utiliza cuando deseas escribir c√≥digo m√°s declarativo y conciso, y cuando trabajas con operaciones de transformaci√≥n de datos.",
        "value": 9012,
        "color": "#27ae60"
    }
]



# Puedes seguir a√±adiendo m√°s conceptos relacionados con Machine Learning y Ciencia de Datos seg√∫n tus necesidades.





return_obj = wordcloud.visualize(programming_concepts+ml_data_science_concepts+advanced_concepts, tooltip_data_fields={
        'text':'Concepto', 'definition':'Definici√≥n', 'example':'Ejemplo',
        'use_case': 'Uso'
        }, per_word_coloring=True,layout='archimedean',padding=3,font_min=18, font_max=72)

st.divider()

with elements("dashboard"):

    # You can create a draggable and resizable dashboard using
    # any element available in Streamlit Elements.

    from streamlit_elements import dashboard

    # First, build a default layout for every element you want to include in your dashboard

    layout = [
        # Parameters: element_identifier, x_pos, y_pos, width, height, [item properties...]
        dashboard.Item("first_item", 0, 0, 5, 3, isDraggable=True),
        dashboard.Item("second_item", 5, 0, 4, 3, isDraggable=True, moved=False),
        dashboard.Item("third_item", 9, 0, 3, 2, isResizable=True),
    ]

    # Next, create a dashboard layout using the 'with' syntax. It takes the layout
    # as first parameter, plus additional properties you can find in the GitHub links below.

    with dashboard.Grid(layout):
        from streamlit_elements import media

        media.Player(url="https://www.youtube.com/watch?v=iik25wqIuFo", controls=True,key="first_item")
        with mui.Card(key="second_item", sx={"display": "flex", "flexDirection": "column", "borderRadius": 3, "overflow": "hidden"}, elevation=1):
            mui.CardHeader(
                title="Shrimp and Chorizo Paella",
                subheader="September 14, 2016",
                avatar=mui.Avatar("R", sx={"bgcolor": "red"}),
                action=mui.IconButton(mui.icon.MoreVert),

            )
            mui.CardMedia(
                component="img",
                height=194,
                image="https://mui.com/static/images/cards/paella.jpg",
                alt="Paella dish",
            )

            with mui.CardContent(sx={"flex": 1}):
                mui.Typography('HOLA MUNDO')

            with mui.CardActions(disableSpacing=True):
                mui.IconButton(mui.icon.Favorite)
                mui.IconButton(mui.icon.Share)
        #dashboard.card("Second item (cannot drag)",key="second_item")
        mui.Paper("Third item (cannot resize)", key="third_item")


st.header('Calendario')

mode = st.selectbox(
        "Calendar Mode:",
        (
            "daygrid",
            "timegrid",
            "timeline",
            "resource-daygrid",
            "resource-timegrid",
            "resource-timeline",
            "list",
            "multimonth",
        ),
    )

events = [
        {
            "title": "Event 1",
            "color": "#FF6C6C",
            "start": "2023-11-03",
            "end": "2023-11-05",
            "resourceId": "a",
        },
        {
            "title": "Event 2",
            "color": "#FFBD45",
            "start": "2023-10-01",
            "end": "2023-10-10",
            "resourceId": "b",
        },
        {
            "title": "Event 3",
            "color": "#FF4B4B",
            "start": "2023-09-20",
            "end": "2023-09-20",
            "resourceId": "c",
        },
        {
            "title": "Event 4",
            "color": "#FF6C6C",
            "start": "2023-09-20",
            "end": "2023-09-20",
            "resourceId": "d",
        },
        {
            "title": "Event 5",
            "color": "#FFBD45",
            "start": "2023-09-20",
            "end": "2023-09-22",
            "resourceId": "e",
        },
        {
            "title": "Event 6",
            "color": "#FF4B4B",
            "start": "2023-07-28",
            "end": "2023-07-20",
            "resourceId": "f",
        },
        {
            "title": "Event 7",
            "color": "#FF4B4B",
            "start": "2023-07-01T08:30:00",
            "end": "2023-07-01T10:30:00",
            "resourceId": "a",
        },
        {
            "title": "Event 8",
            "color": "#3D9DF3",
            "start": "2023-07-01T07:30:00",
            "end": "2023-07-01T10:30:00",
            "resourceId": "b",
        },
        {
            "title": "Event 9",
            "color": "#3DD56D",
            "start": "2023-07-02T10:40:00",
            "end": "2023-07-02T12:30:00",
            "resourceId": "c",
        },
        {
            "title": "Event 10",
            "color": "#FF4B4B",
            "start": "2023-07-15T08:30:00",
            "end": "2023-07-15T10:30:00",
            "resourceId": "d",
        },
        {
            "title": "Event 11",
            "color": "#3DD56D",
            "start": "2023-07-15T07:30:00",
            "end": "2023-07-15T10:30:00",
            "resourceId": "e",
        },
        {
            "title": "Event 12",
            "color": "#3D9DF3",
            "start": "2023-07-21T10:40:00",
            "end": "2023-07-21T12:30:00",
            "resourceId": "f",
        },
        {
            "title": "Event 13",
            "color": "#FF4B4B",
            "start": "2023-07-17T08:30:00",
            "end": "2023-07-17T10:30:00",
            "resourceId": "a",
        },
        {
            "title": "Event 14",
            "color": "#3D9DF3",
            "start": "2023-07-17T09:30:00",
            "end": "2023-07-17T11:30:00",
            "resourceId": "b",
        },
        {
            "title": "Event 15",
            "color": "#3DD56D",
            "start": "2023-07-17T10:30:00",
            "end": "2023-07-17T12:30:00",
            "resourceId": "c",
        },
        {
            "title": "Event 16",
            "color": "#FF6C6C",
            "start": "2023-07-17T13:30:00",
            "end": "2023-07-17T14:30:00",
            "resourceId": "d",
        },
        {
            "title": "Event 17",
            "color": "#FFBD45",
            "start": "2023-07-17T15:30:00",
            "end": "2023-07-17T16:30:00",
            "resourceId": "e",
        },
    ]
calendar_resources = [
        {"id": "a", "building": "Building A", "title": "Room A"},
        {"id": "b", "building": "Building A", "title": "Room B"},
        {"id": "c", "building": "Building B", "title": "Room C"},
        {"id": "d", "building": "Building B", "title": "Room D"},
        {"id": "e", "building": "Building C", "title": "Room E"},
        {"id": "f", "building": "Building C", "title": "Room F"},
    ]

calendar_options = {
        "editable": "true",
        "navLinks": "true",
        "resources": calendar_resources,
    }

if "resource" in mode:
    if mode == "resource-daygrid":
        calendar_options = {
                **calendar_options,
                "initialDate": "2023-07-01",
                "initialView": "resourceDayGridDay",
                "resourceGroupField": "building",
            }
    elif mode == "resource-timeline":
        calendar_options = {
                **calendar_options,
                "headerToolbar": {
                    "left": "today prev,next",
                    "center": "title",
                    "right": "resourceTimelineDay,resourceTimelineWeek,resourceTimelineMonth",
                },
                "initialDate": "2023-07-01",
                "initialView": "resourceTimelineDay",
                "resourceGroupField": "building",
            }
    elif mode == "resource-timegrid":
            calendar_options = {
                **calendar_options,
                "initialDate": "2023-07-01",
                "initialView": "resourceTimeGridDay",
                "resourceGroupField": "building",
            }
    else:
        if mode == "daygrid":
            calendar_options = {
                **calendar_options,
                "headerToolbar": {
                    "left": "today prev,next",
                    "center": "title",
                    "right": "dayGridDay,dayGridWeek,dayGridMonth",
                },
                "initialDate": "2023-07-01",
                "initialView": "dayGridMonth",
            }
        elif mode == "timegrid":
            calendar_options = {
                **calendar_options,
                "initialView": "timeGridWeek",
            }
        elif mode == "timeline":
            calendar_options = {
                **calendar_options,
                "headerToolbar": {
                    "left": "today prev,next",
                    "center": "title",
                    "right": "timelineDay,timelineWeek,timelineMonth",
                },
                "initialDate": "2023-07-01",
                "initialView": "timelineMonth",
            }
        elif mode == "list":
            calendar_options = {
                **calendar_options,
                "initialDate": "2023-07-01",
                "initialView": "listMonth",
            }
        elif mode == "multimonth":
            calendar_options = {
                **calendar_options,
                "initialView": "multiMonthYear",
            }

state = calendar(
        events=events,
        options=calendar_options,
        key=mode,
    )
#st.write(state)
#------------------------------------- Footer ---------------------------------------------------------
st.divider()
with open('src/Frontend/footer.html') as foo:
    #components.html(foo.read(),width=1600)
    st.markdown(foo.read(), unsafe_allow_html=True)
